        PROGRAM pingpong

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C This file has been written as a sample solution to an exercise in a 
C course given at the Edinburgh Parallel Computing Centre. It is made
C freely available with the understanding that every copy of this file
C must include this header and that EPCC takes no responsibility for
C the use of the enclosed teaching material.
C Authors:    Alan Simpson, Joel Malard
C Contact:    epcc-tec@epcc.ed.ac.uk
C
C NOTE: This file has been altered by Asim YarKhan of the Joint Institute 
C for Computational Science (jics@cs.utk.edu) for an MPI workshop.
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        IMPLICIT NONE

        include "mpif.h"

	INTEGER proc_A
	PARAMETER(proc_A=0)		

	INTEGER proc_B
	PARAMETER(proc_B=1)		

        INTEGER ierror, rank

        CALL MPI_XXXX(ierror)

        CALL MPI_XXXX_XXXX(XXX_XXXX_XXXXX, rank, ierror)

        IF (rank .EQ. proc_A) THEN
	  CALL processor_A()
	ELSE IF (rank .EQ. proc_B) THEN
	  CALL processor_B()
	END IF

        CALL MPI_XXXXXXXX(ierror)

        STOP
        END


	SUBROUTINE processor_A()
	IMPLICIT NONE

        include "mpif.h"

	INTEGER ping
	PARAMETER(ping=101)
	INTEGER pong
	PARAMETER(pong=101)

	INTEGER proc_A
	PARAMETER(proc_A=0)		

	INTEGER proc_B
	PARAMETER(proc_B=1)		

	INTEGER i, ierror
	INTEGER status(MPI_STATUS_XXXX)

	DOUBLE PRECISION start, finish, time

	REAL buffer(10001)
        COMMON /data/ buffer

	INTEGER length

        WRITE(*,25)
   25   FORMAT('length   time/message (sec)   transfer rate (byte/sec)')

	DO length = 1, 10001, 1000

	start = MPI_WTIME()

	DO i = 1,100

	  CALL MPI_SSEND(buffer, XXXXXX, XXX_XXXX,
     $                   proc_B, ping, MPI_COMM_WORLD, XXXXXX)

	  CALL MPI_XXXX(buffer, length, MPI_REAL,
     $                  proc_B, pong, XXX_XXXX_XXXXX,
     $                  status, ierror)

	END DO

	finish = MPI_XXXXX()

	time = finish - start

 	WRITE(*,50) length, time/200., REAL(2 * 4 * 100 * length)/time
   50   FORMAT(i5,8x,f10.8,13x,f14.2)

	END DO

	RETURN
	END


	SUBROUTINE processor_B()
	IMPLICIT NONE

        include "mpif.h"

	INTEGER ping
	PARAMETER(ping=101)

	INTEGER pong
	PARAMETER(pong=101)

	INTEGER proc_A
	PARAMETER(proc_A=0)		

	INTEGER proc_B
	PARAMETER(proc_B=1)		

	INTEGER i, ierror
	INTEGER status(MPI_STATUS_SIZE)

	DOUBLE PRECISION start, finish, time

	REAL buffer(10001)
        COMMON /data/ buffer

	INTEGER length

	DO length = 1, 10001, 1000

	start = MPI_WTIME()

	DO i = 1,100

	  CALL MPI_RECV(buffer, length, XXX_XXXX,
     $                  proc_A, ping, MPI_COMM_WORLD,
     $                  status, ierror)

	  CALL MPI_XXXXX(XXXXXX, length, MPI_REAL,
     $                   proc_A, pong, MPI_COMM_WORLD, ierror)

	END DO

	finish = MPI_WTIME()

	time = finish - start

	END DO

	RETURN
	END

